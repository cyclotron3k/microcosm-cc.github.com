
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Microcosm</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Le styles -->
    <link href="css/bootstrap.css" rel="stylesheet">
    <link href="css/prettify.css" type="text/css" rel="stylesheet" />
    <style type="text/css">
      body {
        padding-top: 30px;
        padding-bottom: 20px;
      }
      h1 {
        font-family: "ubuntu", sans-serif;
      }
    </style>
    <!-- <link href="css/bootstrap-responsive.css" rel="stylesheet"> -->

    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>

  <body data-spy="scroll" data-target=".docs-sidebar">
    <div class="container">
      <div class="row">
        <div class="span3 docs-sidebar">
          <ul class="nav nav-list docs-sidenav affix">
            <li class="nav-header">Overview</li>
            <li><a href="#overview">The Microcosm API</a></li>
            <li class="nav-header">Conventions</li>
            <li><a href="#behave">Standard Behaviour</a></li>
            <li><a href="#struct">Structure</a></li>
            <li><a href="#page">Pagination</a></li>
            <li><a href="#auth">Authentication</a></li>
            <li><a href="#error">Error Handling</a></li>
            <li class="nav-header">Site and Microcosms</li>
            <li><a href="#site">/site</a></li>
            <li><a href="#microcosm">/microcosms</a></li>
            <li><a href="#conv">/conversations</a></li>
            <li><a href="#event">/events</a></li>
            <li><a href="#poll">/polls</a></li>
            <li><a href="#comment">/comments</a></li>
            <li class="nav-header">Users</li>
            <li><a href="#user">/profiles</a></li>
            <li><a href="#whoami">/whoami</a></li>
          </ul>
        </div>
        <div class="span9">

          <div class="row">
            <div class="hero-unit">
              <h1>Microcosm</h1>
              <p>Welcome to the API documentation for Microcosm. On this single-page site we explain how to use the Microcosm API. Print this page or bookmark, just keep it handy.</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="overview">
              <h2>The Microcosm API</h2>
              <p>The Microcosm API is a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_APIs">RESTful</a> API. We acknowledge that the users of an API are the developers who implement against the API, and with that in mind we've sought to make pragmatic choices that help and assist you the developer. With that in mind we offer an API that we believe has the best of REST without limiting the ways in which you, the developer, might implement a solution using our API.</p>
              <p>What we give you:
                <ul>
                  <li>A <a href="http://www.json.org/">JSON</a> interface of resources via the most common HTTP verbs.</li>
                  <li>Token-based authentication to identify the user and client accessing the API.</li>
                  <li><a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> meta data to show the relation of a given resource to other resources, as well as a description of your user's permissions so that you know what state changing actions your user can perform.</li>
                </ul>
              </p>
              <p>Deviations from pure REST:
                <ul>
                  <li>We allow HTTP methods to be overridden.</li>
                  <li>We include support for callbacks (including <a href="https://en.wikipedia.org/wiki/JSONP">JSONP</a>), which means that our responses include meta data in addition to the resource itself.</li>
                  <li>We haven't created unique content types for each resource, we just use <code>application/json</code> everywhere.</li>
                  <li>We put our API version in the URL rather than within HTTP headers.</li>
                </ul>
              </p>
              <p>The best way to get to know an API is to use it, so let's begin...</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="behave">
              <h2>Standard Behaviour</h2>

              <h3 id="boiler">Boiler Plate</h3>
              <p>Our responses are wrapped in boiler plate JSON that helps to describe what has happened. The purpose of this is to support callbacks, provide a really simple way of getting error/success information, and to additionally support JSONP.</p>
              <p>All responses are wrapped in this:</p>
              <pre><code>{
  context: "",
  status: 200,
  data: null
  error: null
}</code></pre>
              <p>
                <ul>
                  <li>context = A string value given to the API via the querystring <code>?context=foo</code> would be returned to you here. This enables you to make asynchronous callbacks and to identify which request this response relates to.</li>
                  <li>status = The integer HTTP status of the response. You should use the HTTP header status, this is provided to help JSONP requests.</li>
                  <li>data = The actual JSON representation of the resource requested.</li>
                  <li>error = An array of strings that contain any error messages. If error is null, then no error has occurred.</li>
                </ul>
              </p>
              <p>The boiler plate can be disabled by ensuring <code>disableBoiler</code> is set in the querystring like this: <code>/api/version/resource?disableBoiler</code>. With that set, only the data object would be returned in the body of the response.</p>

              <h3 id="http">HTTP Status Codes</h3>
              <p>We only return a few status codes that generally describe the state of a request, your application need only handle these status codes:</p>
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>HTTP</th>
                    <th>Status</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>200</td>
                    <td>Success</td>
                    <td></td>
                  </tr>
                  <tr>
                    <td>301</td>
                    <td>Permanently Moved</td>
                    <td>The requested resource is now to be found at the location described in the HTTP Location header.</td>
                  </tr>
                  <tr>
                    <td>302</td>
                    <td>Temporarily Moved</td>
                    <td>The requested resource is now to be found at the location described in the HTTP Location header. After using POST to create a resource we will return a 301 to point you to the newly created resource. Your client should follow HTTP redirects.</td>
                  </tr>
                  <tr>
                    <td>400</td>
                    <td>Bad Request</td>
                    <td>The client has made a bad request, which includes requests with malformed JSON, or invalid data values as well as requests in which the URL contains incorrect values (such as providing a string for an ID when an integer is expected).</td>
                  </tr>
                  <tr>
                    <td>401</td>
                    <td>Unauthorized</td>
                    <td>You lack the permission to do whatever you were trying to do. But, if you are able to authenticate as a user with that permission then you will be allowed to do this. That is, if your user is not logged in then prompt them to login, or if your user is logged in then they may need a different user or a higher privileged user to perform the task for them (such as editing content owned by someone else).</td>
                  </tr>
                  <tr>
                    <td>403</td>
                    <td>Forbidden</td>
                    <td>You aren't allowed to do what you were trying to do, and logging in is not going to help you. For example, you are not allowed to delete a whole collection of resources.</td>
                  </tr>
                  <tr>
                    <td>404</td>
                    <td>Not Found</td>
                    <td>We cannot find what you requested, though the request looks good. Note that we do not differentiate between items that have never existed and ones that once existed but are now deleted... if we can't return it to you, then we return 'not found'.</td>
                  </tr>
                  <tr>
                    <td>500</td>
                    <td>Server Error</td>
                    <td>Something bad has happened at our end and it's not your fault. You made a good request, but we've failed you. Please try again later, or send us a bug report: <a href="mailto:hello@microcosm.cc">hello@microcosm.cc</a> with an example of both the request and response and we will definitely look into it.</td>
                  </tr>
                </tbody>
              </table>

              <h3 id="jsonp">Callbacks using JSONP</h3>
              <p>We support JSONP, and to achieve that 3 things are needed:
                <ol>
                  <li>The ability to wrap the returned JSON in a callback function.</li>
                  <li>The ability to override the HTTP method so that you can perform the action of HTTP PUT and HTTP DELETE via HTTP POST.</li>
                  <li>The ability to only ever return a HTTP 200 OK status.</li>
                </ol>
              </p>
              <p>To fulfil the first requirement you can wrap the response in a callback function name you provide by adding <code>callback=funcName</code> to the querystring of your request.</p>
              <p>To fulfil the second requirement you can overload the HTTP method by making a HTTP POST request and adding <code>method=PUT</code> or <code>method=DELETE</code> as necessary to the querystring.</p>
              <p class="warning">Warning: If you are not using JSONP or have not proven that you require HTTP method overriding, then please do not do this. Instead just use the correct HTTP verb when you make your request. HTTP PUT and DELETE are <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Idempotent_methods_and_web_applications">idempotent</a> whereas HTTP POST is not, and this can create issues.</p>
              <p>To fulfil the third requirement you may add <code>always200</code> to the querystring and this will force the API will only ever return a HTTP 200 OK header regardless of what happened, however the <code>status</code> property in the boiler plate JSON will still give the underlying HTTP status code so that you can handle the response appropriately.</p>
              <p>This means that to make a JSONP request for GET and POST, you merely have made a request similar to <code>/api/version/resource?always200&amp;callback=funcName</code> and for PUT and DELETE you have additionally added <code>&amp;method=PUT</code> or <code>&amp;method=DELETE</code> as necessary to the querystring.</p>
              <p class="text-error">Warning: You should not combine <code>disableBoiler</code> with the JSONP features, as the API will only ever be returning HTTP 200 OK, and you will need to check the <code>status</code> property of the boiler plate.</p>
              <p>You are also able to provide <code>context</code> via the querystring and whatever the value of that parameter is will be provided back to you in the <code>context</code> property of the boiler plate.</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="struct">
              <h2>Structure</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="page">
              <h2>Pagination</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="auth">
              <h2>Authentication</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="error">
              <h2>Error Handling</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="site">
              <h2>/site</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

          <div class="row">
            <div class="span9" id="microcosm">
              <h2>/microcosms</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="conv">
              <h2>/conversations</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="comment">
              <h2>/comments</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="event">
              <h2>/events</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="poll">
              <h2>/polls</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="active">
              <h2>/activity</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="whoami">
              <h2>/whoami</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="user">
              <h2>/users</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>
          
          <div class="row">
            <div class="span9" id="notify">
              <h2>/notifications</h2>
              <p>Some text goes here, this is just placeholder</p>
            </div>
          </div>

        </div>
      </div>

      <hr>

      <footer>
        <p>&copy; Microcosm CC Ltd 2012</p>
      </footer>

    </div>

    <script src="js/jquery.js"></script>
    <script src="js/bootstrap-scrollspy.js"></script>
    <script type="text/javascript" src="http://use.typekit.net/jvs2zbx.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
    <script src="js/prettify.js" type="text/javascript"></script>
    <script>
    $(document).ready(function() {
        var prettify = false;
        $("pre code").parent().each(function() {
            $(this).addClass('prettyprint');
            prettify = true;
        });
        if (prettify) {prettyPrint();}
    });
    </script>
  </body>
</html>
