<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Microcosm</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Source Sans Pro -->
    <script type="text/javascript" src="//use.typekit.net/jvs2zbx.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>

    <!-- Le styles -->
    <link href="css/tocify.css"    rel="stylesheet" />
    <link href="css/bootstrap.css" rel="stylesheet" />
    <style type="text/css">
      body {
        padding-top: 30px;
        padding-bottom: 20px;
      }
      h1 {
        font-family: "ubuntu", sans-serif;
      }
      pre code {
        overflow: auto;
      }
    </style>

    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="container">
      <div class="row">

        <div class="span3">
          <div id="toc"></div>
        </div>

        <div id="docs" class="span9">

          <h1>Microcosm</h1>

          <p>Welcome to the API documentation for Microcosm. On this single-page site we explain how to use the Microcosm API. Print this page or bookmark, just keep it handy.</p>

          <h2>Introduction</h2>

          <p>The Microcosm API is a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_APIs">RESTful</a> API. We acknowledge that the users of an API are the developers who implement against the API, and with that in mind we've sought to make pragmatic choices that help and assist you, the developer. With that in mind we offer an API that we believe has the best of REST without limiting the ways in which you might implement a solution using our API.</p>

          <p>What we give you:</p>
          <ul>
            <li>A <a href="http://www.json.org/">JSON</a> interface of resources that you can manipulate via the most common HTTP verbs.</li>
            <li>Token-based authentication to identify the user and client accessing the API.</li>
            <li><a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> inspired meta data to show the relation of a given resource to other resources, as well as a description of your user's permissions so that you know what state changing actions your user can perform.</li>
          </ul>

          <p>Deviations from pure REST and HATEOAS:</p>
          <ul>
            <li>We allow HTTP methods to be overridden.</li>
            <li>We include support for callbacks (including <a href="https://en.wikipedia.org/wiki/JSONP">JSONP</a>), which means that our responses include meta data in addition to the resource itself.</li>
            <li>We haven't created unique content types for each resource, we just use <code>application/json</code>.</li>
            <li>We put our API version information in the URL rather than the HTTP headers.</li>
            <li>We only serve JSON.</li>
          </ul>

          <p>Because of those deviations we are not a pure REST API (the lack of custom content types took care of that), and we are not a pure HATEOAS interface (the lack of XML-only support took care of making the links less discoverable). However, we do think that for the majority of developers these design decisions will help make the API easier to implement against.</p>

          <p>The next bit covers conventions and standards within the API, if you just want to get to the nitty gritty and make an API call, then jump the conventions and go straight to the <a href="#site">/site</a> API to make your first call.</p>

          <h2>Conventions</h2>

          <h3>Boiler Plate</h3>

          <p>Our responses are wrapped in boiler plate JSON that helps to describe what has happened. The purpose of this is to support callbacks, provide a really simple way of getting error/success information, and to additionally support JSONP.</p>

          <p>All responses are wrapped in this:</p>

          <pre><code>{
  "context": "",
  "status": 200,
  "data": null
  "error": null
}</code></pre>

          <ul>
            <li><code>context</code> = A string value given to the API via the querystring <code>?context=foo</code> would be returned to you here. This enables you to make asynchronous callbacks and to identify which request this response relates to.</li>
            <li><code>status</code> = The integer HTTP status of the response. You should use the HTTP header status, this is provided to help JSONP requests.</li>
            <li><code>data</code> = The actual JSON representation of the resource requested.</li>
            <li><code>error</code> = An array of strings that contain any error messages. If error is null, then no error has occurred.</li>
          </ul>

          <p>The boiler plate can be disabled by ensuring <code>disableBoiler</code> is set in the querystring like this: <code>/api/version/resource?disableBoiler</code>. With that set, only the data object would be returned in the body of the response.</p>

          <h3>HTTP Status Codes</h3>

          <p>We only return a few <a href="http://www.ietf.org/rfc/rfc2616.txt" title="RFC 2616">HTTP status codes</a> that generally describe the state of a request, your application need only handle these status codes:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP</th>
                <th>Status</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>OK</td>
                <td>Standard response for successful HTTP requests.</td>
              </tr>
              <tr>
                <td>301</td>
                <td>Permanently Moved</td>
                <td>The requested resource is now to be found at the location described in the HTTP Location header, all future requests should be sent to that URL.</td>
              </tr>
              <tr>
                <td>302</td>
                <td>Found</td>
                <td>The requested resource is now to be found at the location described in the HTTP Location header. After using a POST or UPDATE we may return a 302 to point you to the newly created resource. Your client should follow HTTP redirects, but future requests should not cache this redirect and should be sent to the original location.</td>
              </tr>
              <tr>
                <td>303</td>
                <td>See Other</td>
                <td>The response to the request can be found under another URL using a separate GET method. When received in response to a POST (or PUT/DELETE), it should be assumed that the server has received the data OK and the new GET request starts a new request chain.</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Bad Request</td>
                <td>The client has made a bad request, which includes requests with malformed JSON, or invalid data values as well as requests in which the URL contains incorrect values (such as providing a string for an ID when an integer is expected).</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Unauthorized</td>
                <td>You lack the permission to do whatever you were trying to do. But, if you are able to authenticate as a user with that permission then you will be allowed to do this. That is, if your user is not logged in then prompt them to login, or if your user is logged in then they may need a different user or a higher privileged user to perform the task for them (such as editing content owned by someone else).</td>
              </tr>
              <tr>
                <td>403</td>
                <td>Forbidden</td>
                <td>You aren't allowed to do what you were trying to do, and logging in is not going to help you. For example, you are not allowed to delete a whole collection of resources.</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Not Found</td>
                <td>We cannot find what you requested, though the request looks good. Note that we do not differentiate between resources that have never existed and ones that once existed but are now deleted... if we can't return it to you, then we return 'not found'.</td>
              </tr>
              <tr>
                <td>405</td>
                <td>Method Not Allowed</td>
                <td>A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.</td>
              </tr>
              <tr>
                <td>500</td>
                <td>Server Error</td>
                <td>Something bad has happened at our end and it's not your fault. You made a good request, but we've failed you. Please try again later, or send us a bug report: <a href="mailto:hello@microcosm.cc">hello@microcosm.cc</a> with an example of both the request and response and we will definitely look into it.</td>
              </tr>
              <tr>
                <td>501</td>
                <td>Not Implemented</td>
                <td>The server either does not recognize the request method, or it lacks the ability to fulfill the request. This is a very rare event and should not happen in normal circumstances, but may happen if we add a basic functionality for a new feature and a request is made to some unimplemented part of that feature.</td>
              </tr>
            </tbody>
          </table>

          <h3>Callbacks using JSONP</h3>

          <p>We support JSONP, and to achieve that 3 things are needed:</p>
          <ol>
            <li>The ability to wrap the returned JSON in a callback function.</li>
            <li>The ability to override the HTTP method so that you can perform the action of HTTP PUT and HTTP DELETE via HTTP POST.</li>
            <li>The ability to only ever return a HTTP 200 OK status.</li>
          </ol>

          <p>To fulfil the first requirement you can wrap the response in a callback function name you provide by adding <code>callback=funcName</code> to the querystring of your request.</p>

          <p>To fulfil the second requirement you can overload the HTTP method by making a HTTP POST request and adding <code>method=PUT</code> or <code>method=DELETE</code> as necessary to the querystring.</p>

          <p class="well well-small">Note: If you are not using JSONP or have not proven that you require HTTP method overriding, then please do not do this. Instead just use the correct HTTP verb when you make your request. HTTP PUT and DELETE are <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Idempotent_methods_and_web_applications">idempotent</a> whereas HTTP POST is not, and this can create issues.</p>

          <p>To fulfil the third requirement you may add <code>always200</code> to the querystring and this will force the API to only ever return a HTTP 200 OK header regardless of what happened, however the <code>status</code> property in the boiler plate JSON will still give the underlying HTTP status code so that you can handle the response appropriately.</p>

          <p>This means that to make a JSONP request for GET and POST, you merely have made a request similar to <code>/api/version/resource?always200&amp;callback=funcName</code> and for PUT and DELETE you have additionally added <code>&amp;method=PUT</code> or <code>&amp;method=DELETE</code> as necessary to the querystring.</p>

          <p class="well well-small">Note: You should not combine <code>disableBoiler</code> with the JSONP features, as the API will only ever be returning HTTP 200 OK, and you will need to check the <code>status</code> property of the boiler plate.</p>

          <p>You are also able to provide <code>context</code> via the querystring and whatever the value of that parameter is will be provided back to you in the <code>context</code> property of the boiler plate.</p>

          <h3>URL Patterns</h3>

          <p>The base path of the API is <code>https://{subdomain}.microco.sm/api/v1</code> for a site hosted on microco.sm or <code>https://{customDomain}/api/v1</code> for a site hosted on a custom domain. All resources are children of that base path. Throughout this documentation you will see that base path written in shorthand as <code>/api/v1</code>.</p>

          <p>There are two patterns of URLs, and which is used is determined by whether the resource name in the URL is pluralised or not. Resources that are pluralised represent collections <code>/api/v1/things</code>, and resources that are not pluralised represent a single resource <code>/api/v1/thing</code>.</p>

          <p>Single resources tend to be descriptive meta-data only and will usually only respond successfully to a GET request.</p>

          <p>Resource URLs never end in a trailing slash, as resources are themselves the entity you operate on, and a trailing slash would indicate a directory on the web server.</p>

          <p>URLs and actions for a resource collection:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP Method</th>
                <th>URL Pattern</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>GET</td>
                <td>/api/v1/things</td>
                <td>Returns a collection of the resource called 'things'.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/things</td>
                <td>Collection updating is largely forbidden, would return HTTP 403. Please update individual resources.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/things</td>
                <td>Collection deletion is largely forbidden, would return HTTP 403. Please delete individual resources.</td>
              </tr>
              <tr>
                <td>POST</td>
                <td>/api/v1/things</td>
                <td>Would create a new resource 'thing' and return a 301 to the GET method for the newly created 'thing'.</td>
              </tr>
              <tr>
                <td>GET</td>
                <td>/api/v1/things/{id}</td>
                <td>Would read a single 'thing' for the given {id}.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/things/{id}</td>
                <td>Would update a single 'thing' for the given {id}.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/things/{id}</td>
                <td>Would delete a single 'thing' for the given {id}.</td>
              </tr>
            </tbody>
          </table>
          <p>URLs and actions for a single resource:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP Method</th>
                <th>URL Pattern</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>POST</td>
                <td>/api/v1/thing</td>
                <td>Create the resource. May be forbidden depending on the type of resource and the permissions derived from your access token.</td>
              </tr>
              <tr>
                <td>GET</td>
                <td>/api/v1/thing</td>
                <td>Read the resource.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/thing</td>
                <td>Update the resource. Likely to be forbidden in a single resource context as this tends to be a read-only resource unless you are the owner of the content.</td>
              </tr>
              <tr>
                <td>PATCH</td>
                <td>/api/v1/thing</td>
                <td>Update part of the resource. Where this is available we use the format specified in <a href="http://tools.ietf.org/html/rfc6902">RFC 6902</a> to describe a list of operations that can modify the resource. We only support the <code>replace</code> operation, which allows you to make a request to replace a given value in the resource without needing knowledge of the whole resource.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/thing</td>
                <td>Delete the resource. Likely to be forbidden in a single resource context as this tends to be a read-only resource unless you are the owner of the content.</td>
              </tr>
            </tbody>
          </table>

          <p class="well well-small">Note: If you add trailing slashes then the API returns a 404 Not Found response. Resources are not directories.</p>

          <h3>Pagination</h3>

          <p>Pagination of collections is supported using the offset approach:</p>
          <ul>
            <li><code>limit</code> = <code>/api/v1/things?limit=10</code> would return up to 10 'things'.</li>
            <li><code>offset</code> = <code>/api/v1/things?offset=50</code> would return up to the default number of 'things' starting at the 50th record.</li>
            <li><code>limit</code> with <code>offset</code> = <code>/api/v1/things?limit=10&amp;offset=30</code> would return up to 10 'things' starting at the 30th record.</li>
          </ul>

          <p>The default value for <code>limit</code> is 25, and the default value for <code>offset</code> is 0. Meaning that if you do nothing, then you will get up to 25 records at the beginning of the collection.</p>

          <p>The format of our collections is consistent, all resources that return a collection of resources will do so using this structure:</p>

          <pre><code>"collectionName": {
  "total": 861,
  "limit": 10,
  "offset": 100,
  "pages": 87,
  "links": [
    {"rel": "first", "href": "/api/v1/things?limit=10"},
    {"rel": "prev", "href": "/api/v1/things?limit=10&offset=90"},
    {"rel": "self", "href": "/api/v1/things?limit=10&offset=100"},
    {"rel": "next", "href": "/api/v1/things?limit=10&offset=110"},
    {"rel": "last", "href": "/api/v1/things?limit=10&offset=860"},
  ],
  "type": "/api/v1/things",
  "items": [
    ...
  ]
}</code></pre>

          <p>Where:</p>
          <ul>
            <li><code>collectionName</code> = Will be replaced with the name of the collection.</li>
            <li><code>total</code> = The total number of resources in the collection.</li>
            <li><code>limit</code> = The maximum number of resources per page of the collection.</li>
            <li><code>offset</code> = The current page in the collection.</li>
            <li><code>pages</code> = The number of pages in the collection.</li>
            <li><code>links</code> = A pre-calculated array of links to navigate the collection. If you are on the last page then you will not receive the <code>"rel": ["next"]</code> link, and likewise if you are on the first page you will not receive the <code>"rel": ["prev"]</code></li>
            <li><code>type</code> = Describes the type of record in the <code>items</code> array.</li>
            <li><code>items</code> = Contains the resources being paginated.</li>
          </ul>

          <p class="well well-small">Note: A 400 Bad Request will be returned if: <code>limit</code> is not divisible by 5, <code>offset</code> is not a multiple of the limit, or the use of <code>offset</code> would navigate to a page outside of the bounds of the collection.</p>

          <h3>Links and Permissions</h3>

          <p>Most of the API calls will return a JSON object called <code>meta</code> that looks like this:</p>
<pre><code>"meta":{
  "links":[
    {"rel":"self", "href":"/api/v1/site"},
    {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chatter"},
    {"rel":"profile", "href":"/api/v1/profiles"}
  ],
  "permissions":{
    "create":false,
    "read":true,
    "update":false,
    "delete":false,
    "guest":true,
    "superUser":false
  }
}</code></pre>

          <p>The <code>links</code> array contains a list of hypermedia links. The <code>rel</code> property describes the <a href="http://www.iana.org/assignments/link-relations/link-relations.xml">relation of the link</a> to the object that this <code>meta</code> object is attached to. The example above is taken from the <code>/site</code> API and shows that the link to itself is at <code>/api/v1/site</code>, and the link to Microcosms can be found at <code>/api/v1/microcosms</code>. Further, it describes the Microcosms link as being of relation <code>microcosms</code>, and also gives the type URL which in this case is the same as the full HRef URL.</p>

          <p>Links are there to describe to you the most obvious navigation actions that you can now perform given the context of the request.</p>

          <p>We currently support the following link relations:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Relation</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>self</td>
                <td>Indicates that the containing object contains a resource equivalent to the one found at the href URL. Basically: A link to itself.</td>
              </tr>
              <tr>
                <td>first</td>
                <td>In a pagination collection, refers to the resource furthest preceding the current resource.</td>
              </tr>
              <tr>
                <td>prev</td>
                <td>In a pagination collection, refers to the resource directly preceding the current resource.</td>
              </tr>
              <tr>
                <td>next</td>
                <td>In a pagination collection, refers to the resource directly following the current resource.</td>
              </tr>
              <tr>
                <td>last</td>
                <td>In a pagination collection, refers to the resource furthest following the current resource.</td>
              </tr>
              <tr>
                <td>comment</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/comments</code> URL or it's child resources.</td>
              </tr>
              <tr>
                <td>conversation</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/conversations</code> URL or it's child resources.</td>
              </tr>
              <tr>
                <td>event</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/events</code> URL or it's child resources.</td>
              </tr>
              <tr>
                <td>microcosm</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/microcosms</code> URL or it's child resources. In the case of a link to a single Microcosm it will usually also include the optional 'title' property to give a displayable name of the linked resource.</td>
              </tr>
              <tr>
                <td>poll</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/polls</code> URL or it's child resources.</td>
              </tr>
              <tr>
                <td>profile</td>
                <td>Refers to a resource that can be found within the <code>/api/v1/profiles</code> URL or it's child resources.</td>
              </tr>
              <tr>
                <td>site</td>
                <td>Refers to the resource that represents the current site and that can be found at the <code>/api/v1/site</code> URL.</td>
              </tr>
            </tbody>
          </table>

          <p>Permissions on the other hand are there to describe to you the data-changing actions you can perform to the resource in the current context. You should interpret permissions alone these lines:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Permission</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>create</code></td>
                <td>Whether you can perform a <code>POST</code> request in this context, and therefore whether you have permission to add resources to a collection.</td>
              </tr>
              <tr>
                <td><code>read</code></td>
                <td>Whether you can perform a <code>GET</code> request in this context. This will always be <code>true</code>, as you will have received a 401 or 403 error if you did not have permission to read this resource.</td>
              </tr>
              <tr>
                <td><code>update</code></td>
                <td>Whether you can perform a <code>PUT</code> request in this context. The general guideline is that you can only update your own content, unless you are authenticated as a super user.</td>
              </tr>
              <tr>
                <td><code>delete</code></td>
                <td>Whether you can perform a <code>DELETE</code> request in this context. In general, you can only delete your own content, unless you are authenticated as a super user.</td>
              </tr>
            </tbody>
          </table>

          <h3>Authentication</h3>

          <p>TODO: Some text goes here, this is just placeholder</p>

          <p>Access tokens can either be provided by http header in the form <code>Authorization: Bearer {access_token}</code> or in the querystring in the form of <code>access_token={access_token}</code>. If both header and querystring are provided, then only the header will be examined. The header is the recommended way of providing the access token, the query string is only made available to help support some clients which may not have access to the HTTP headers.</p>

          <h3>Error Handling</h3>

          <p>As a developer implementing against the API, you must rely on the <a href="#http">HTTP status codes</a> returned to handle errors.</p>

          <p>If an error has occurred we will additionally inform you, the developer, of the cause of the error by populating the <code>error</code> property of the <a href="boiler">boiler plate</a>. The <code>error</code> property holds an array of strings to help you, the developer, to fix the issue.</p>
          
          <p class="well well-small">Note: The audience of the error string array is the developer implementing against the API. Please take care not to send error messages to the end user. Instead handle it in some elegant way in the UI that you present to the end user. To emphasise this: the error text is not localised, it will always be in English, it is designed to be understood by a developer and not an end user, it may change over time to be clearer to developers how to fix the error. Bottom line: Rely on HTTP status codes and nothing else.</p>
          
          <p>An example error (in this case for an invalid authentication access token):</p>
          
          <pre><code>HTTP/1.1 403 Forbidden
Content-Type: application/json

{
  "context":"",
  "status":403,
  "data":null,
  "error":[
    "You have supplied an invalid access token"
  ]
}
</code></pre>

          <p class="well well-small">Note: If you are making <a href="#jsonp">JSONP</a> requests and are making use of the <code>always200</code> querystring flag, then you must look at the <code>status</code> property in the JSON response to ensure that you do not silently ignore errors.</p>

          <h2>Tutorial</h2>

          <p class="well well-small">We do not yet have a tutorial to share, but it is a TODO on our tasklist and we will prepare one before the launch of the beta version of the API.</p>

          <h2>API Reference</h2>

          <h3>API Flow</h3>
          
          <p>At the highest level you can imagine that the core flow through the API is this:
            <img src="img/flow.png" alt="Image showing the high level flow through the API." />
          </p>

          <p>Sites have Microcosms, Microcosms have types of content that include Conversations, Events and Poll. That content can additionally have Comments. Sites also have Profiles, and as a convenience method we provide WhoAmI to redirect you to the profile of the authenticated user.</p>

          <p>That is overly simplistic, of course Comments are made by Profiles, and an Event describes which Microcosm it is in, etc but as a high-level view it suffices.</p>

          <h3>/site</h3>

          <p>Provides information about the site that you are currently on: the name of the site, the site logo, who created the site, and who owns the site.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/site</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/site</td>
                <td>GET</td>
                <td>Returns information about the current site.</td>
              </tr>
            </tbody>
          </table>

          <h4>Single Resource</h4>
          
          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/site</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: GET,OPTIONS
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>GET</h5>

          <p>There are no query string paramaters, the response of this API call describes the basic properties of a web site.</p>

          <p>Example request:</p>

<pre><code>curl -X GET https://{subdomain}.microco.sm/api/v1/site</code></pre>

          <p>Example response:</p>

<pre><code>{
   "context":"",
   "status":200,
   "data":{
      "siteId":1,
      "title":"LFGSS",
      "description":"London Fixed-Gear and Single-Speed",
      "subdomainKey":"lfgss",
      "domain":"demo.microco.sm",
      "created":"2013-04-04T08:45:08.022807Z",
      "createdBy":{
         "id":1,
         "userId":1,
         "profileName":"motter",
         "visible":true,
         "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
         "banned":false,
         "moderator":false,
         "admin":false,
         "meta":{
            "links":[
               {"rel":"self", "href":"/api/v1/profiles/1"},
               {"rel":"site", "href":"/api/v1/sites/1"}
            ]
         }
      },
      "ownedBy":{
         "id":1,
         "userId":1,
         "profileName":"motter",
         "visible":true,
         "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
         "banned":false,
         "moderator":false,
         "admin":false,
         "meta":{
            "links":[
               {"rel":"self", "href":"/api/v1/profiles/1"},
               {"rel":"site", "href":"/api/v1/sites/1"}
            ]
         }
      },
      "logoUrl":"http://placekitten.com/300/150",
      "meta":{
         "links":[
            {"rel":"self", "href":"/api/v1/sites/1"},
            {"rel":"microcosm", "href":"/api/v1/microcosms"},
            {"rel":"profile", "href":"/api/v1/profiles"}
         ],
         "permissions":{
            "create":false,
            "read":true,
            "update":false,
            "delete":false,
            "guest":true,
            "superUser":false
         }
      }
   },
   "error":null
}</code></pre>

          <h3>/microcosms</h3>

          <p>Provides an interface to the Microcosms that exist on a site and information on the items contained within them. Conceptually a Microcosm can be imagined as being like a 'forum' or 'sub-forum' on a traditional piece of forum software, it is the container for all conversations, polls, and other resources such as events.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/microcosms</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/microcosms</td>
                <td>POST</td>
                <td>Creates a new Microcosm on the current site.</td>
              </tr>
              <tr>
                <td>/api/v1/microcosms</td>
                <td>GET</td>
                <td>Returns information about the Microcosms that exist on the current site.</td>
              </tr>
              <tr>
                <td style="white-space:nowrap;">/api/v1/microcosms/{id:[0-9]+}</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/microcosms/{id:[0-9]+}</td>
                <td>GET</td>
                <td>Returns information about the Microcosm specified by the numeric identifier and a collection of items related to this Microcosm.</td>
              </tr>
              <tr>
                <td>/api/v1/microcosms/{id:[0-9]+}</td>
                <td>PUT</td>
                <td>Updates the Microcosm specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/microcosms/{id:[0-9]+}</td>
                <td>DELETE</td>
                <td>Deletes the Microcosm specified by the numeric identifier.</td>
              </tr>
            </tbody>
          </table>

          <h4>Collection</h4>
          
          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/microcosms</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,POST,GET
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>POST</h5>

          <p>Request:</p>

          <p>The structure of the JSON to create a Microcosm is:</p>

<pre><code>{
  "visibility": "public",
  "title": "General Chit-Chat",
  "description": "A place to talk about anything and everything."
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>visibility</code></td>
                <td>String</td>
                <td>Required</td>
                <td>Must be one of 'public', 'protected' or 'private'. Where; 'public' allows the Microcosm to be accessed without limitation and be discoverable across other sites, 'protected' allows the Microcosm to be found and displayed publicly within the context of the current site, and 'private' means that the Microcosm if fully private and won't be discoverable by guests.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual name for the Microcosm, displayed everywhere the Microcosm is mentioned. Should be as terse, yet descriptive as possible.</td>
              </tr>
              <tr>
                <td><code>description</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A single line of text that provides information on the Microcosm and provides the definition of what content is on-topic within the Micrcosm.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X POST -d "{\"visibility\":\"public\", \"title\":\"General Chit-Chat\",\"description\":\"A place to talk about anything and everything.\"}" -g "https://{subdomain}.microco.sm/api/v1/microcosms"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/microcosms/2
Content-Length: 52

{
  "context":"",
  "status":302,
  "data":null,
  "error":null
}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly created Microcosm.</p>

          <h5>GET</h5>

          <p>Fetches a collection of Microcosms. If a valid <code>access_token</code> is provided then the collection may contain private Microcosms not visible to guests.</p>

          <p>Request:</p>

          <p>The pagination query string parameters allow you to paginate the collection of Microcosms returned:</p>

          <p>Example request:</p>

<pre><code>curl -X GET -g "https://{subdomain}.microco.sm/api/v1/microcosms"</code></pre>

          <p>Example response:</p>

<pre><code>{
   "context":"",
   "status":200,
   "data":{
      "siteId":1,
      "title":"LFGSS",
      "description":"London Fixed-Gear and Single-Speed",
      "subdomainKey":"lfgss",
      "domain":"demo.microco.sm",
      "created":"2013-04-04T08:45:08.022807Z",
      "createdBy":{
         "id":1,
         "userId":1,
         "profileName":"motter",
         "visible":true,
         "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
         "banned":false,
         "moderator":false,
         "admin":false,
         "meta":{
            "links":[
               {"rel":"self", "href":"/api/v1/profiles/1"},
               {"rel":"site", "href":"/api/v1/sites/1"}
            ]
         }
      },
      "ownedBy":{
         "id":1,
         "userId":1,
         "profileName":"motter",
         "visible":true,
         "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
         "banned":false,
         "moderator":false,
         "admin":false,
         "meta":{
            "links":[
               {"rel":"self", "href":"/api/v1/profiles/1"},
               {"rel":"site", "href":"/api/v1/sites/1"}
            ]
         }
      },
      "logoUrl":"http://placekitten.com/300/150",
      "meta":{
         "links":[
            {"rel":"self", "href":"/api/v1/sites/1"},
            {"rel":"microcosm", "href":"/api/v1/microcosms"},
            {"rel":"profile", "href":"/api/v1/profiles"}
         ],
         "permissions":{
            "create":false,
            "read":true,
            "update":false,
            "delete":false,
            "guest":true,
            "superUser":false
         }
      }
   },
   "error":null
}</code></pre>

          <h4>Single Resource</h4>

          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/microcosms/1</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,GET,PUT,DELETE
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>GET</h5>

          <p>Fetches the detailed information about a single Microcosm, including a collection of items contained within the Microcosm. The pagination query string parameters allow to you traverse the collection of items. Items include conversations, events, polls, etc.</p>

          <p>Example request:</p>

<pre><code>curl -i -X GET https://{subdomain}.microco.sm/api/v1/microcosms/1</code></pre>

          <p>Example response:</p>

<pre><code>{
   "context":"",
   "status":200,
   "data":{
      "id":1,
      "visibility":"public",
      "title":"General Chit-Chat",
      "description":"A place to talk about anything and everything.",
      "created":"2013-04-04T08:56:30.111523Z",
      "createdBy":{
         "id":1,
         "userId":1,
         "profileName":"motter",
         "visible":true,
         "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
         "banned":false,
         "moderator":false,
         "admin":false,
         "meta":{
            "links":[
               {"rel":"self", "href":"/api/v1/profiles/1"},
               {"rel":"site", "href":"/api/v1/sites/1"}
            ]
         }
      },
      "moderators":null,
      "open":true,
      "deleted":false,
      "moderated":false,
      "visible":true,
      "items":{
         "total":2,
         "limit":25,
         "offset":0,
         "pages":1,
         "links":[
            {"rel":"first", "href":"/api/v1/microcosms/1"},
            {"rel":"self", "href":"/api/v1/microcosms/1"},
            {"rel":"last", "href":"/api/v1/microcosms/1"}
         ],
         "type":"/api/v1/comments",
         "items":[
            {
               "microcosmId":1,
               "itemType":"poll",
               "id":1,
               "title":"Music poll",
               "created":"2013-04-04T08:58:02.168527Z",
               "createdBy":{
                  "id":1,
                  "userId":1,
                  "profileName":"motter",
                  "visible":true,
                  "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
                  "banned":false,
                  "moderator":false,
                  "admin":false,
                  "meta":{
                     "links":[
                       {"rel":"self", "href":"/api/v1/profiles/1"},
                       {"rel":"site", "href":"/api/v1/sites/1"}
                     ]
                  }
               },
               "comments":0,
               "views":0,
               "sticky":false,
               "open":true,
               "deleted":false,
               "moderated":false,
               "visible":true,
               "lastCommentId":1,
               "lastCommentCreatedBy":{
                  "id":1,
                  "userId":1,
                  "profileName":"motter",
                  "visible":true,
                  "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
                  "banned":false,
                  "moderator":false,
                  "admin":false,
                  "meta":{
                     "links":[
                       {"rel":"self", "href":"/api/v1/profiles/1"},
                       {"rel":"site", "href":"/api/v1/sites/1"}
                     ]
                  }
               },
               "lastCommentCreated":"2013-04-04T08:58:17.881349Z",
               "meta":{
                  "links":[
                     {"rel":"self", "href":"/api/v1/polls/1"}
                  ]
               }
            },
            {
               "microcosmId":1,
               "itemType":"event",
               "id":1,
               "title":"Velodrome take 2",
               "created":"2013-04-04T08:58:08.770606Z",
               "createdBy":{
                  "id":1,
                  "userId":1,
                  "profileName":"motter",
                  "visible":true,
                  "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
                  "banned":false,
                  "moderator":false,
                  "admin":false,
                  "meta":{
                     "links":[
                       {"rel":"self", "href":"/api/v1/profiles/1"},
                       {"rel":"site", "href":"/api/v1/sites/1"}
                     ]
                  }
               },
               "comments":0,
               "views":0,
               "sticky":false,
               "open":true,
               "deleted":false,
               "moderated":false,
               "visible":true,
               "meta":{
                  "links":[
                     {"rel":"self", "href":"/api/v1/events/1"}
                  ]
               }
            }
         ]
      },
      "meta":{
         "links":[
            {"rel":"self", "href":"/api/v1/microcosms/1"},
            {"rel":"site", "href":"/api/v1/sites/1"}
         ],
         "permissions":{
            "create":false,
            "read":true,
            "update":false,
            "delete":false,
            "guest":true,
            "superUser":false
         }
      }
   },
   "error":null
}</code></pre>
  
          <h5>PUT</h5>

          <p>Updates a Microcosm. The structure of the JSON to perform the update is:</p>

<pre><code>{
  "visibility": "public",
  "title": "General Chit-Chat",
  "description": "A place to talk about anything and everything.",
  "editReason": "Updated the title"
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>visibility</code></td>
                <td>String</td>
                <td>Required</td>
                <td>Must be one of 'public', 'protected' or 'private'. Where; 'public' allows the Microcosm to be accessed without limitation and be discoverable across other sites, 'protected' allows the Microcosm to be found and displayed publicly within the context of the current site, and 'private' means that the Microcosm if fully private and won't be discoverable by guests.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual name for the Microcosm, displayed everywhere the Microcosm is mentioned. Should be as terse, yet descriptive as possible.</td>
              </tr>
              <tr>
                <td><code>description</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A single line of text that provides information on the Microcosm and provides the definition of what content is on-topic within the Micrcosm.</td>
              </tr>
              <tr>
                <td><code>editReason</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A single line of text that provides information on the reason for the update, this usually encapsulates a description of the change made.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PUT -d "{\"visibility\":\"public\", \"title\":\"General Chatter\",\"description\":\"A place to talk about anything and everything.\", \"editReason\":\"Updated the title\"}" -g "https://{subdomain}.microco.sm/api/v1/microcosms/1"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/microcosms/2
Content-Length: 52

{
  "context":"",
  "status":302,
  "data":null,
  "error":null
}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly updated Microcosm.</p>

          <h5>PATCH</h5>

          <p>PATCH allows partial updates to a resource. This is best used when some fragments of metadata require different or complex permissions. An example of this may be that the owner of a Microcosm or a super user (site admin) can delete a Microcosm, but only a super user can undelete a Microcosm.</p>

          <p>The body of a PATCH request is implemented according to <a href="http://tools.ietf.org/html/rfc6902">RFC 6902</a>, though it should be noted that the Content-Type remains <code>application/json</code>.</p>

          <p>Our PATCH support is limited, but does provide an easy way to change small bits of meta data safely and without requiring you to construct a full PUT request. We support the use of the <code>"op":"replace"</code> for the JSON paths <code>/sticky</code>, <code>/deleted</code>, <code>/moderated</code>, and <code>/open</code>.</p>

          <p>The JSON that you must send along with the PATCH request must be an array of PATCH instructions, like this:</p>

<pre><code>[
  {"op":"replace", "path":"/sticky", "value": true},
  {"op":"replace", "path":"/open", "value": true},
  {"op":"replace", "path":"/moderated", "value": false},
  {"op":"replace", "path":"/deleted", "value": false},
]</code></pre>

          <p>The minimum number of acceptable PATCH instructions in the array is 1, a single replace instruction.</p>

          <p>Example request:</p>
<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PATCH -d "[{\"op\":\"replace\", \"path\":\"/sticky\", \"value\": true}]" -g "http://esi01.dev.microcosm.cc/api/v1/microcosms/1"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Content-Length: 52
Location: /api/v1/microcosms/1

{"context":"","status":302,"data":null,"error":null}</code></pre>

          <p>That request will set the <code>sticky</code> property of a Microcosm to <code>true</code>. You will need to follow the redirect to GET the updated resource to see the change reflected.</p>

          <p>Microcosm fragment before:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    ...
    "sticky":false,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>Microcosm fragment after:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    ...
    "edited": "2013-04-09T11:25:48.715438Z",
    "editedBy": {
      "id": 1,
      "userId": 1,
      "profileName": "motter",
      "visible": true,
      "gravatar": "http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
      "banned": false,
      "moderator": false,
      "admin": true,
      "meta": {
        "links": [
          {rel: "self", href: "/api/v1/profiles/1"},
          {rel: "site", href: "/api/v1/sites/1"}
        ]
      }
    },
    "editReason": "Set sticky to true",
    ...
    "sticky":true,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>The modified resource now reflects <code>"sticky":true</code> and the edited properties are populated describing the change to the resource.</p>

          <h5>DELETE</h5>

          <p>Deletes a Microcosm.</p>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -X DELETE -g "https://{subdomain}.microco.sm/api/v1/microcosms/1"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 52

{"context":"","status":200,"data":null,"error":null}</code></pre>

          <h3>/conversations</h3>

          <p>Provides an interface to the conversations that exist on a site and the comments contained within them. A conversation is merely a titled (topical) collection of comments.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/conversations</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations</td>
                <td>POST</td>
                <td>Creates a new conversation on the current site.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations</td>
                <td>GET</td>
                <td>Returns information about the conversations that exist on the current site.</td>
              </tr>
              <tr>
                <td style="white-space:nowrap;">/api/v1/conversations/{id:[0-9]+}</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations/{id:[0-9]+}</td>
                <td>GET</td>
                <td>Returns information about the conversation specified by the numeric identifier and a collection of comments related to this conversation.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations/{id:[0-9]+}</td>
                <td>PUT</td>
                <td>Updates the conversation specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations/{id:[0-9]+}</td>
                <td>PATCH</td>
                <td>Updates specific fragments of a conversation resource specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/conversations/{id:[0-9]+}</td>
                <td>DELETE</td>
                <td>Deletes the conversation specified by the numeric identifier.</td>
              </tr>
            </tbody>
          </table>

          <h4>Collection</h4>
          
          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/conversations</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,POST,GET
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>POST</h5>

          <p>Request:</p>

          <p>The flow for creating a conversation is to create the conversation item, and then to create comments against the conversation. A conversation is simply an empty container for a list of comments.</p>

          <p>The structure of the JSON to create a conversation is:</p>

<pre><code>{
  "microcosmId": 1,
  "title": "Did anyone see the article on the news last night?"
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>microcosmId</code></td>
                <td>Integer</td>
                <td>Required</td>
                <td>Identifies which Microcosm this conversation will reside in. This property is required as every conversation must reside in a single Microcosm.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual description of the conversation that usually encapsulates the topic of the conversation. Should be as terse, yet descriptive as possible.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X POST -d "{\"microcosmId\":1, \"title\":\"Did anyone see the article on the news last night?\"}" -g "https://{subdomain}.microco.sm/api/v1/conversations"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/conversations/4
Content-Length: 52

{
  "context":"",
  "status":302,
  "data":null,
  "error":null
}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly created conversation.</p>

          <h5>GET</h5>

          <p>Fetches a collection of conversations across all Microcosms. If a valid <code>access_token</code> is provided then the collection may contain conversations that exist in private Microcosms not visible to guests.</p>

          <p>Request:</p>

          <p>The pagination query string parameters allow you to paginate the collection of conversations returned:</p>

          <p>Example request:</p>

<pre><code>curl -X GET -g "https://{subdomain}.microco.sm/api/v1/conversations"</code></pre>

          <p>Example response:</p>

<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "conversations":{
      "total":2,
      "limit":25,
      "offset":0,
      "pages":1,
      "links":[
        {"rel":"first", "href":"/api/v1/conversations"},
        {"rel":"self", "href":"/api/v1/conversations"},
        {"rel":"last", "href":"/api/v1/conversations"}
      ],
      "type":"/api/v1/conversations",
      "items":[
        {
          "id":1,
          "microcosmId":1,
          "title":"Just some chatter",
          "created":"2013-04-08T08:53:48.913599Z",
          "createdBy":{
            "id":1,
            "userId":1,
            "profileName":"motter",
            "visible":true,
            "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
            "banned":false,
            "moderator":false,
            "admin":false,
            "meta":{
              "links":[
                {"rel":"self", "href":"/api/v1/profiles/1"},
                {"rel":"site", "href":"/api/v1/sites/1"}
              ]
            }
          },
          "sticky":false,
          "open":true,
          "deleted":false,
          "moderated":false,
          "visible":true,
          "meta":{
            "links":[
              {"rel":"self", "href":"/api/v1/conversations/1"},
              {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chit-Chat"}
            ]
          }
        },
        {
          "id":4,
          "microcosmId":1,
          "title":"Did anyone see the article on the news last night?",
          "created":"2013-04-08T10:01:38.474536Z",
          "createdBy":{
            "id":1,
            "userId":1,
            "profileName":"motter",
            "visible":true,
            "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
            "banned":false,
            "moderator":false,
            "admin":false,
            "meta":{
              "links":[
                {"rel":"self", "href":"/api/v1/profiles/1"},
                {"rel":"site", "href":"/api/v1/sites/1"}
              ]
            }
          },
          "sticky":false,
          "open":true,
          "deleted":false,
          "moderated":false,
          "visible":true,
          "meta":{
            "links":[
              {"rel":"self", "href":"/api/v1/conversations/4"},
              {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chit-Chat"}
            ]
          }
        }
      ]
    },
    "meta":{
      "links":[
        {"rel":"self", "href":"/api/v1/conversations"}
      ],
      "permissions":{
        "create":false,
        "read":true,
        "update":false,
        "delete":false,
        "guest":true,
        "superUser":false
      }
    }
  },
  "error":null
}</code></pre>

          <h4>Single Resource</h4>

          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/conversations/1</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,GET,PUT,DELETE
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>GET</h5>

          <p>Fetches the detailed information about a single conversation, including a collection of comments contained within the conversation. The pagination query string parameters allow to you traverse the collection of comments.</p>

          <p>Example request:</p>

<pre><code>curl -i -X GET https://{subdomain}.microco.sm/api/v1/conversations/1</code></pre>

          <p>Example response:</p>

<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Just some chatter",
    "created":"2013-04-08T08:53:48.913599Z",
    "createdBy":{
      "id":1,
      "userId":1,
      "profileName":"motter",
      "visible":true,
      "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
      "banned":false,
      "moderator":false,
      "admin":false,
      "meta":{
        "links":[
          {"rel":"self", "href":"/api/v1/profiles/1"},
          {"rel":"site", "href":"/api/v1/sites/1"}
        ]
      }
    },
    "sticky":false,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    "comments":{
      "total":1,
      "limit":25,
      "offset":0,
      "pages":1,
      "links":[
        {"rel":"first", "href":"/api/v1/conversations/1"},
        {"rel":"self", "href":"/api/v1/conversations/1"},
        {"rel":"last", "href":"/api/v1/conversations/1"}
      ],
      "type":"/api/v1/comments",
      "items":[
        {
          "id":2,
          "itemType":"conversation",
          "itemId":1,
          "created":"2013-04-08T10:11:12.763561Z",
          "createdBy":{
            "id":1,
            "userId":1,
            "profileName":"motter",
            "visible":true,
            "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
            "banned":false,
            "moderator":false,
            "admin":false,
            "meta":{
              "links":[
                {"rel":"self", "href":"/api/v1/profiles/1"},
                {"rel":"site", "href":"/api/v1/sites/1"}
              ]
            }
          },
          "revisions":1,
          "edited":"2013-04-08T10:11:12.763561Z",
          "editedBy":{
            "id":1,
            "userId":1,
            "profileName":"motter",
            "visible":true,
            "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
            "banned":false,
            "moderator":false,
            "admin":false,
            "meta":{
              "links":[
                {"rel":"self", "href":"/api/v1/profiles/1"},
                {"rel":"site", "href":"/api/v1/sites/1"}
              ]
            }
          },
          "deleted":false,
          "moderated":false,
          "visible":true,
          "inReplyTo":0,
          "attachments":0,
          "firstLine":"",
          "markdown":"A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men +awesome_guy +blueprints to come to\nthe aid of their country. http://www.lfgss.com/ This is just a\nregular paragraph.\n\nThe quick brown [fox](http://www.google.com/?q=fox) jumped over the lazy\ndog's back.\n\n### Header 3\n\n\u003e This is a blockquote.\n\u003e \n\u003e This is the second paragraph in the blockquote.\n\u003e\n\u003e ## This is an H2 +Velocio @blueprints in a blockquote",
          "html":"\u003ch1\u003eA First Level Header\u003c/h1\u003e\n\u003ch2\u003eA Second Level Header\u003c/h2\u003e\n\u003cp\u003eNow is the time for all good men +awesome_guy +blueprints to come to the aid of their country. \u003ca href=\"/jump/ub\"\u003ewww.lfgss.com/\u003c/a\u003e This is just a regular paragraph.\u003c/p\u003e\n\u003cp\u003eThe quick brown \u003ca href=\"/jump/jc\"\u003efox\u003c/a\u003e jumped over the lazy dog&#39;s back.\u003c/p\u003e\n\u003ch3\u003eHeader 3\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a blockquote.\u003c/p\u003e\n\u003cp\u003eThis is the second paragraph in the blockquote.\u003c/p\u003e\n\u003ch2\u003eThis is an H2 \u003ca href=\"/profiles/2\"\u003e+Velocio\u003c/a\u003e @blueprints in a blockquote\u003c/h2\u003e\n\u003c/blockquote\u003e",
          "meta":{
            "links":[
              {"rel":"self", "href":"/api/v1/comments/1"},
              {"rel":"conversation", "href":"/api/v1/conversations/1"}
            ]
          }
        }
      ]
    },
    "meta":{
      "links":[
        {"rel":"self", "href":"/api/v1/conversations/1"},
        {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chit-Chat"}
      ],
      "permissions":{
        "create":false,
        "read":true,
        "update":false,
        "delete":false,
        "guest":true,
        "superUser":false
      }
    }
  },
  "error":null
}</code></pre>
  
          <h5>PUT</h5>

          <p>Updates a conversation. The structure of the JSON to perform the update is:</p>

<pre><code>{
  "microcosmId": 1,
  "title": "Sightings in the media",
  "editReason": "Updated the title"
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>microcosmId</code></td>
                <td>String</td>
                <td>Required</td>
                <td>Indicates which Microcosm this conversation belongs to, you can move a conversation from one Microcosm to another by changing this value. The move will work according to the user permissions against the destination Microcosm, and the visibility scope of the destination Microcosm. That is, you cannot move a conversation to a private Microcosm for which you do not have rights.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual name for the conversation, displayed everywhere the conversation is mentioned. Should be as terse, yet descriptive as possible.</td>
              </tr>
              <tr>
                <td><code>editReason</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A single line of text that provides information on the reason for the update, this usually encapsulates a description of the change made.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PUT -d "{\"microcosmId\":1, \"title\":\"Sightings in the media\", \"editReason\":\"Updated the title\"}" -g "https://{subdomain}.microco.sm/api/v1/conversations/4"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/conversations/4
Content-Length: 52

{
  "context":"",
  "status":302,
  "data":null,
  "error":null
}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly updated conversation.</p>

          <h5>PATCH</h5>

          <p>PATCH allows partial updates to a resource. This is best used when some fragments of metadata require different or complex permissions. An example of this may be that the owner (author) of a conversation or a super user (Microcosm moderator or site admin) can delete a conversation, but only a super user can undelete a conversation.</p>

          <p>The body of a PATCH request is implemented according to <a href="http://tools.ietf.org/html/rfc6902">RFC 6902</a>, though it should be noted that the Content-Type remains <code>application/json</code>.</p>

          <p>Our PATCH support is limited, but does provide an easy way to change small bits of meta data safely and without requiring you to construct a full PUT request. We support the use of the <code>"op":"replace"</code> for the JSON paths <code>/sticky</code>, <code>/deleted</code>, <code>/moderated</code>, and <code>/open</code>.</p>

          <p>The JSON that you must send along with the PATCH request must be an array of PATCH instructions, like this:</p>

<pre><code>[
  {"op":"replace", "path":"/sticky", "value": true},
  {"op":"replace", "path":"/open", "value": true},
  {"op":"replace", "path":"/moderated", "value": false},
  {"op":"replace", "path":"/deleted", "value": false},
]</code></pre>

          <p>The minimum number of acceptable PATCH instructions in the array is 1, a single replace instruction.</p>

          <p>Example request:</p>
<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PATCH -d "[{\"op\":\"replace\", \"path\":\"/sticky\", \"value\": true}]" -g "http://esi01.dev.microcosm.cc/api/v1/conversations/4"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Content-Length: 52
Location: /api/v1/conversations/4

{"context":"","status":302,"data":null,"error":null}</code></pre>

          <p>That request will set the <code>sticky</code> property of a conversation to <code>true</code>. You will need to follow the redirect to GET the updated resource to see the change reflected.</p>

          <p>Conversation fragment before:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Just some chatter",
    ...
    "sticky":false,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>Conversation fragment after:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Just some chatter",
    ...
    "edited": "2013-04-09T11:25:48.715438Z",
    "editedBy": {
      "id": 1,
      "userId": 1,
      "profileName": "motter",
      "visible": true,
      "gravatar": "http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
      "banned": false,
      "moderator": false,
      "admin": true,
      "meta": {
        "links": [
          {rel: "self", href: "/api/v1/profiles/1"},
          {rel: "site", href: "/api/v1/sites/1"}
        ]
      }
    },
    "editReason": "Set sticky to true",
    ...
    "sticky":true,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>The modified resource now reflects <code>"sticky":true</code> and the edited properties are populated describing the change to the resource.</p>

          <h5>DELETE</h5>

          <p>Deletes a conversation.</p>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -X DELETE -g "https://{subdomain}.microco.sm/api/v1/conversations/4"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 52

{"context":"","status":200,"data":null,"error":null}</code></pre>

          <h3>/events</h3>

          <p>Provides an interface to the events that exist on a site and the comments contained within them. An event describes some thing that happens some where at some time, and can be attended by some people. A collection of comments may be attached to an event.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/events</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/events</td>
                <td>POST</td>
                <td>Creates a new event on the current site.</td>
              </tr>
              <tr>
                <td>/api/v1/events</td>
                <td>GET</td>
                <td>Returns information about the events that exist on the current site.</td>
              </tr>
              <tr>
                <td style="white-space:nowrap;">/api/v1/events/{id:[0-9]+}</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/events/{id:[0-9]+}</td>
                <td>GET</td>
                <td>Returns information about the event specified by the numeric identifier and a collection of comments related to this event.</td>
              </tr>
              <tr>
                <td>/api/v1/events/{id:[0-9]+}</td>
                <td>PUT</td>
                <td>Updates the event specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/events/{id:[0-9]+}</td>
                <td>PATCH</td>
                <td>Updates specific fragments of a event resource specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/events/{id:[0-9]+}</td>
                <td>DELETE</td>
                <td>Deletes the event specified by the numeric identifier.</td>
              </tr>
            </tbody>
          </table>

          <h4>Collection</h4>
          
          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS http://esi01.dev.microcosm.cc/api/v1/events</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,POST,GET
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>POST</h5>

          <p>Request:</p>

          <p>The flow for creating an event is to create the event item, and then to create comments against the event. An event is simply an empty container for a list of comments, but with additional structure to describe the event. An event generally is something that occurs at a moment in time, at some place in space... whilst a proposed event need no time or place, a confirmed event usually has a time and place.</p>

          <p>The structure of the JSON to create an event is:</p>

<pre><code>{
  "microcosmId": 1,
  "title": "Did anyone see the article on the news last night?",
  "when": "2013-09-15T09:42:48.515233Z",
  "duration": 180,
  "where": "Herne Hill Velodrome",
  "rsvpLimit": 38
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>microcosmId</code></td>
                <td>Integer</td>
                <td>Required</td>
                <td>Identifies which Microcosm this event will reside in. This property is required as every event must reside in a single Microcosm.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual description of the event that usually encapsulates the topic of the event. Should be as terse, yet descriptive as possible.</td>
              </tr>
              <tr>
                <td><code>when</code></td>
                <td>ISO8601 Datetime</td>
                <td>Optional</td>
                <td>The scheduled date for that the event occurs on.</td>
              </tr>
              <tr>
                <td><code>duration</code></td>
                <td>Integer</td>
                <td>Optional</td>
                <td>How long the event runs for. The number is a time in minutes, so 180 = 3 hours. If no value is provided then we assume that an event has a duration of 3 hours.</td>
              </tr>
              <tr>
                <td><code>where</code></td>
                <td>String</td>
                <td>Optional</td>
                <td>A short textual description of the location of the event. This may be an address, and this value will be mapped based on the first result from a Google maps search of this value.</td>
              </tr>
              <tr>
                <td><code>rsvpLimit</code></td>
                <td>Integer</td>
                <td>Optional</td>
                <td>For events that are space constrained, this is the maximum number of people that can attend the event.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X POST -d "{\"title\":\"Velodrome take 2\",\"microcosmId\":1,\"when\":\"2013-09-15T09:42:48.515233Z\",\"duration\":183473,\"where\":\"Herne Hill Velodrome\", \"rsvpLimit\":38}" -g "http://esi01.dev.microcosm.cc/api/v1/events"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/events/1
Content-Length: 52

{"context":"","status":302,"data":null,"error":null}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly created event.</p>

          <h5>GET</h5>

          <p>Fetches a collection of events across all Microcosms. If a valid <code>access_token</code> is provided then the collection may contain events that exist in private Microcosms not visible to guests.</p>

          <p>Request:</p>

          <p>The pagination query string parameters allow you to paginate the collection of events returned:</p>

          <p>Example request:</p>

<pre><code>curl -X GET -g "https://{subdomain}.microco.sm/api/v1/events"</code></pre>

          <p>Example response:</p>

<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "events":{
      "total":1,
      "limit":25,
      "offset":0,
      "pages":1,
      "links":[
        {"rel":"first", "href":"/api/v1/events"},
        {"rel":"self", "href":"/api/v1/events"},
        {"rel":"last", "href":"/api/v1/events"}
      ],
      "type":"/api/v1/events",
      "items":[
        {
          "id":1,
          "microcosmId":1,
          "title":"Velodrome take 2",
          "created":"2013-04-09T16:01:57.329572Z",
          "createdBy":{
            "id":1,
            "userId":1,
            "profileName":"motter",
            "visible":true,
            "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
            "banned":false,
            "moderator":false,
            "admin":false,
            "meta":{
              "links":[
                {"rel":"self", "href":"/api/v1/profiles/1"},
                {"rel":"site", "href":"/api/v1/sites/1"}
              ]
            }
          },
          "sticky":false,
          "open":true,
          "deleted":false,
          "moderated":false,
          "visible":true,
          "when":"2013-09-15T09:42:48.515233Z",
          "duration":183473,
          "where":"Herne Hill Velodrome",
          "lat":50.87,
          "lon":0.03,
          "status":"upcoming",
          "meta":{
            "links":[
              {"rel":"self", "href":"/api/v1/events/1"},
              {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chit-Chat"}
            ]
          }
        }
      ]
    },
    "meta":{
      "links":[
        {"rel":"self", "href":"/api/v1/events"}
      ],
      "permissions":{
        "create":false,
        "read":true,
        "update":false,
        "delete":false,
        "guest":true,
        "superUser":false
      }
    }
  },
  "error":null
}</code></pre>

          <h4>Single Resource</h4>

          <h5>OPTIONS</h5>

          <p>Example request:</p>

<pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/events/1</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Allow: OPTIONS,GET,PUT,PATCH,DELETE
Content-Type: text/plain; charset=utf-8
Content-Length: 0</code></pre>

          <h5>GET</h5>

          <p>Fetches the detailed information about a single event, including a collection of comments contained within the event. The pagination query string parameters allow to you traverse the collection of comments.</p>

          <p>Example request:</p>

<pre><code>curl -i -X GET https://{subdomain}.microco.sm/api/v1/events/1</code></pre>

          <p>Example response:</p>

<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Velodrome take 2",
    "created":"2013-04-09T16:01:57.329572Z",
    "createdBy":{
      "id":1,
      "userId":1,
      "profileName":"motter",
      "visible":true,
      "gravatar":"http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
      "banned":false,
      "moderator":false,
      "admin":false,
      "meta":{
        "links":[
          {"rel":"self", "href":"/api/v1/profiles/1"},
          {"rel":"site", "href":"/api/v1/sites/1"}
        ]
      }
    },
    "sticky":false,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    "when":"2013-09-15T09:42:48.515233Z",
    "duration":183473,
    "where":"Herne Hill Velodrome",
    "lat":50.87,
    "lon":0.03,
    "status":"upcoming",
    "rsvpLimit":38,
    "rsvpSpaces":38,
    "comments":{
      "total":0,
      "limit":25,
      "offset":0,
      "pages":0,
      "links":[
        {"rel":"first", "href":"/api/v1/events/1"},
        {"rel":"self", "href":"/api/v1/events/1"},
        {"rel":"last", "href":"/api/v1/events/1"}
      ],
      "type":"/api/v1/comments",
      "items":null
    },
    "meta":{
      "links":[
        {"rel":"self", "href":"/api/v1/events/1"},
        {"rel":"microcosm", "href":"/api/v1/microcosms/1", "title":"General Chit-Chat"}
      ],
      "permissions":{
        "create":false,
        "read":true,
        "update":false,
        "delete":false,
        "guest":true,
        "superUser":false
      }
    }
  },
  "error":null
}</code></pre>
  
          <h5>PUT</h5>

          <p>Updates an event. The structure of the JSON to perform the update is:</p>

<pre><code>{
  "microcosmId": 1,
  "title": "Velodrome take 2",
  "when": "2013-09-15T09:42:48.515233Z",
  "duration": 183473,
  "where": "Herne Hill Velodrome",
  "rsvpLimit": 60,
  "status": "confirmed",
  "editReason": "Moved to confirmed, increased attendee number"
}</code></pre>

          <p>Where:</p>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Optional?</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>microcosmId</code></td>
                <td>Integer</td>
                <td>Required</td>
                <td>Identifies which Microcosm this event will reside in. This property is required as every event must reside in a single Microcosm.</td>
              </tr>
              <tr>
                <td><code>title</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual description of the event that usually encapsulates the topic of the event. Should be as terse, yet descriptive as possible.</td>
              </tr>
              <tr>
                <td><code>when</code></td>
                <td>ISO8601 Datetime</td>
                <td>Required</td>
                <td>The scheduled date for that the event occurs on.</td>
              </tr>
              <tr>
                <td><code>duration</code></td>
                <td>Integer</td>
                <td>Required</td>
                <td>How long the event runs for. The number is a time in minutes, so 180 = 3 hours. If no value is provided then we assume that an event has a duration of 3 hours.</td>
              </tr>
              <tr>
                <td><code>where</code></td>
                <td>String</td>
                <td>Required</td>
                <td>A short textual description of the location of the event. This may be an address, and this value will be mapped based on the first result from a Google maps search of this value.</td>
              </tr>
              <tr>
                <td><code>rsvpLimit</code></td>
                <td>Integer</td>
                <td>Required</td>
                <td>For events that are space constrained, this is the maximum number of people that can attend the event.</td>
              </tr>
              <tr>
                <td><code>status</code></td>
                <td>String</td>
                <td>Required</td>
                <td>Either 'proposed' or 'confirmed'.</td>
              </tr>
              <tr>
                <td><code>editReason</code></td>
                <td>String</td>
                <td>Required</td>
                <td>The reason the event is being updated.</td>
              </tr>
            </tbody>
          </table>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PUT -d "{\"title\":\"Velodrome take 2\",\"microcosmId\":1,\"editReason\":\"test\",\"when\":\"2013-09-15T09:42:48.515233Z\",\"duration\":183473,\"where\":\"At the velodrome\", \"rsvpLimit\":38, \"status\":\"upcoming\"}" -g "http://esi01.dev.microcosm.cc/api/v1/events/1"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Location: /api/v1/events/1
Content-Length: 52

{
  "context":"",
  "status":302,
  "data":null,
  "error":null
}</code></pre>

          <p>Your client should follow the <code>Location</code> header to retrieve detailed information about the newly updated event.</p>

          <h5>PATCH</h5>

          <p>PATCH allows partial updates to a resource. This is best used when some fragments of metadata require different or complex permissions. An example of this may be that the owner (author) of an event or a super user (Microcosm moderator or site admin) can delete an event, but only a super user can undelete an event.</p>

          <p>The body of a PATCH request is implemented according to <a href="http://tools.ietf.org/html/rfc6902">RFC 6902</a>, though it should be noted that the Content-Type remains <code>application/json</code>.</p>

          <p>Our PATCH support is limited, but does provide an easy way to change small bits of meta data safely and without requiring you to construct a full PUT request. We support the use of the <code>"op":"replace"</code> for the JSON paths <code>/sticky</code>, <code>/deleted</code>, <code>/moderated</code>, and <code>/open</code>.</p>

          <p>The JSON that you must send along with the PATCH request must be an array of PATCH instructions, like this:</p>

<pre><code>[
  {"op":"replace", "path":"/sticky", "value": true},
  {"op":"replace", "path":"/open", "value": true},
  {"op":"replace", "path":"/moderated", "value": false},
  {"op":"replace", "path":"/deleted", "value": false},
]</code></pre>

          <p>The minimum number of acceptable PATCH instructions in the array is 1, a single replace instruction.</p>

          <p>Example request:</p>
<pre><code>curl -i -H "Authorization: Bearer letmein" -H "Content-Type: application/json" -X PATCH -d "[{\"op\":\"replace\", \"path\":\"/sticky\", \"value\": true}]" -g "http://esi01.dev.microcosm.cc/api/v1/events/4"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 302 Found
Content-Type: application/json
Content-Length: 52
Location: /api/v1/events/1

{"context":"","status":302,"data":null,"error":null}</code></pre>

          <p>That request will set the <code>sticky</code> property of an event to <code>true</code>. You will need to follow the redirect to GET the updated resource to see the change reflected.</p>

          <p>Event fragment before:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Just some chatter",
    ...
    "sticky":false,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>Event fragment after:</p>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "id":1,
    "microcosmId":1,
    "title":"Just some chatter",
    ...
    "edited": "2013-04-09T11:25:48.715438Z",
    "editedBy": {
      "id": 1,
      "userId": 1,
      "profileName": "motter",
      "visible": true,
      "gravatar": "http://s.gravatar.com/avatar/e9dbb0ec77ba164b51f6d2c8e62869ba?s=80",
      "banned": false,
      "moderator": false,
      "admin": true,
      "meta": {
        "links": [
          {rel: "self", href: "/api/v1/profiles/1"},
          {rel: "site", href: "/api/v1/sites/1"}
        ]
      }
    },
    "editReason": "Set sticky to true",
    ...
    "sticky":true,
    "open":true,
    "deleted":false,
    "moderated":false,
    "visible":true,
    ...
    }
  },
  "error":null
}</code></pre>

          <p>The modified resource now reflects <code>"sticky":true</code> and the edited properties are populated describing the change to the resource.</p>

          <h5>DELETE</h5>

          <p>Deletes an event.</p>

          <p>Example request:</p>

<pre><code>curl -i -H "Authorization: Bearer letmein" -X DELETE -g "https://{subdomain}.microco.sm/api/v1/events/1"</code></pre>

          <p>Example response:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 52

{"context":"","status":200,"data":null,"error":null}</code></pre>

          <h3>/polls</h3>

          <p>Provides an interface to the polls that exist on a site and the comments contained within them. A poll describes a question with a set of answers that a person can vote on. A collection of comments may be attached to an poll.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/polls</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/polls</td>
                <td>POST</td>
                <td>Creates a new poll on the current site.</td>
              </tr>
              <tr>
                <td>/api/v1/polls</td>
                <td>GET</td>
                <td>Returns information about the polls that exist on the current site.</td>
              </tr>
              <tr>
                <td style="white-space:nowrap;">/api/v1/polls/{id:[0-9]+}</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/polls/{id:[0-9]+}</td>
                <td>GET</td>
                <td>Returns information about the poll specified by the numeric identifier and a collection of comments related to this poll.</td>
              </tr>
              <tr>
                <td>/api/v1/polls/{id:[0-9]+}</td>
                <td>PUT</td>
                <td>Updates the poll specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/polls/{id:[0-9]+}</td>
                <td>DELETE</td>
                <td>Deletes the poll specified by the numeric identifier.</td>
              </tr>
            </tbody>
          </table>

          <h3>/comments</h3>

          <p>Provides an interface to the comments that exist on a site and to which items they are related. A comment encapsulates the unstructured site content in the form of textual contributions formatted as <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> and to be rendered as HTML.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/comments</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/comments</td>
                <td>POST</td>
                <td>Creates a new comment on the current site.</td>
              </tr>
              <tr>
                <td>/api/v1/comments</td>
                <td>GET</td>
                <td>Returns information about the comments that exist on the current site.</td>
              </tr>
              <tr>
                <td style="white-space:nowrap;">/api/v1/comments/{id:[0-9]+}</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/comments/{id:[0-9]+}</td>
                <td>GET</td>
                <td>Returns information about the comment specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/comments/{id:[0-9]+}</td>
                <td>PUT</td>
                <td>Updates the comment specified by the numeric identifier.</td>
              </tr>
              <tr>
                <td>/api/v1/comments/{id:[0-9]+}</td>
                <td>DELETE</td>
                <td>Deletes the comment specified by the numeric identifier.</td>
              </tr>
            </tbody>
          </table>

          <h3>/profiles</h3>

          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/whoami</h3>

          <p>A convenience resource that will acts like the *nix <a href="http://linux.die.net/man/1/whoami">whoami</a> command by determining your identity from the authentication token and issuing a redirect to the <code>/api/v1/profiles</code> of the currently authenticated user.</p>

          <h4>URLs and Methods</h4>

          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/whoami</td>
                <td>OPTIONS</td>
                <td>The <code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/whoami</td>
                <td>GET</td>
                <td>Given a valid authentication token, will redirect to the applicable <code>/api/v1/profiles</code> for the authenticated user profiles.</td>
              </tr>
            </tbody>
          </table>

        </div>
      </div>
    </div>

    <!-- jQuery and Bootstrap -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>

    <!-- Tocify -->
    <script src="/js/jquery.tocify.min.js"></script>

    <!-- Kick out the Jamms -->
    <script>
    $(document).ready(function() {
        // Navigation wizardry, builds navigation from the structure of the document
        var toc = $("#toc").tocify({ context: "#docs", selectors: "h2,h3,h4,h5" }).data("toc-tocify");
    });
    </script>
  </body>
</html>
