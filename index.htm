<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Microcosm</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Source Sans Pro -->
    <script type="text/javascript" src="//use.typekit.net/jvs2zbx.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>

    <!-- Le styles -->
    <link href="css/tocify.css"    rel="stylesheet" />
    <link href="css/bootstrap.css" rel="stylesheet" />
    <link href="css/prettify.css"  rel="stylesheet" />
    <style type="text/css">
      body {
        padding-top: 30px;
        padding-bottom: 20px;
      }
      h1 {
        font-family: "ubuntu", sans-serif;
      }
    </style>

    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="container">
      <div class="row">

        <div class="span3">
          <div id="toc"></div>
        </div>

        <div class="span9">

          <h1>Microcosm</h1>

          <p>Welcome to the API documentation for Microcosm. On this single-page site we explain how to use the Microcosm API. Print this page or bookmark, just keep it handy.</p>

          <h2>Introduction</h2>

          <p>The Microcosm API is a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_APIs">RESTful</a> API. We acknowledge that the users of an API are the developers who implement against the API, and with that in mind we've sought to make pragmatic choices that help and assist you, the developer. With that in mind we offer an API that we believe has the best of REST without limiting the ways in which you might implement a solution using our API.</p>
          <p>What we give you:
            <ul>
              <li>A <a href="http://www.json.org/">JSON</a> interface of resources that you can manipulate via the most common HTTP verbs.</li>
              <li>Token-based authentication to identify the user and client accessing the API.</li>
              <li><a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> inspired meta data to show the relation of a given resource to other resources, as well as a description of your user's permissions so that you know what state changing actions your user can perform.</li>
            </ul>
          </p>
          <p>Deviations from pure REST and HATEOAS:
            <ul>
              <li>We allow HTTP methods to be overridden.</li>
              <li>We include support for callbacks (including <a href="https://en.wikipedia.org/wiki/JSONP">JSONP</a>), which means that our responses include meta data in addition to the resource itself.</li>
              <li>We haven't created unique content types for each resource, we just use <code>application/json</code>.</li>
              <li>We put our API version information in the URL rather than the HTTP headers.</li>
              <li>We only serve JSON.</li>
            </ul>
          </p>
          <p>Because of those deviations we are not a pure REST API (the lack of custom content types took care of that), and we are not a pure HATEOAS interface (the lack of XML-only support took care of making the links less discoverable). However, we do think that for the majority of developers these design decisions will help make the API easier to implement against.</p>
          <p>The next bit covers conventions and standards within the API, if you just want to get to the nitty gritty and make an API call, then jump the conventions and go straight to the <a href="#site">/site</a> API to make your first call.</p>

          <h2>Conventions</h2>

          <h3>Boiler Plate</h3>

          <p>Our responses are wrapped in boiler plate JSON that helps to describe what has happened. The purpose of this is to support callbacks, provide a really simple way of getting error/success information, and to additionally support JSONP.</p>
          <p>All responses are wrapped in this:</p>
          <pre><code>{
  "context": "",
  "status": 200,
  "data": null
  "error": null
}</code></pre>
          <p>
            <ul>
              <li><code>context</code> = A string value given to the API via the querystring <code>?context=foo</code> would be returned to you here. This enables you to make asynchronous callbacks and to identify which request this response relates to.</li>
              <li><code>status</code> = The integer HTTP status of the response. You should use the HTTP header status, this is provided to help JSONP requests.</li>
              <li><code>data</code> = The actual JSON representation of the resource requested.</li>
              <li><code>error</code> = An array of strings that contain any error messages. If error is null, then no error has occurred.</li>
            </ul>
          </p>
          <p>The boiler plate can be disabled by ensuring <code>disableBoiler</code> is set in the querystring like this: <code>/api/version/resource?disableBoiler</code>. With that set, only the data object would be returned in the body of the response.</p>

          <h3>HTTP Status Codes</h3>

          <p>We only return a few status codes that generally describe the state of a request, your application need only handle these status codes:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP</th>
                <th>Status</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>200</td>
                <td>Success</td>
                <td></td>
              </tr>
              <tr>
                <td>301</td>
                <td>Permanently Moved</td>
                <td>The requested resource is now to be found at the location described in the HTTP Location header.</td>
              </tr>
              <tr>
                <td>302</td>
                <td>Temporarily Moved</td>
                <td>The requested resource is now to be found at the location described in the HTTP Location header. After using POST to create a resource we will return a 301 to point you to the newly created resource. Your client should follow HTTP redirects.</td>
              </tr>
              <tr>
                <td>400</td>
                <td>Bad Request</td>
                <td>The client has made a bad request, which includes requests with malformed JSON, or invalid data values as well as requests in which the URL contains incorrect values (such as providing a string for an ID when an integer is expected).</td>
              </tr>
              <tr>
                <td>401</td>
                <td>Unauthorized</td>
                <td>You lack the permission to do whatever you were trying to do. But, if you are able to authenticate as a user with that permission then you will be allowed to do this. That is, if your user is not logged in then prompt them to login, or if your user is logged in then they may need a different user or a higher privileged user to perform the task for them (such as editing content owned by someone else).</td>
              </tr>
              <tr>
                <td>403</td>
                <td>Forbidden</td>
                <td>You aren't allowed to do what you were trying to do, and logging in is not going to help you. For example, you are not allowed to delete a whole collection of resources.</td>
              </tr>
              <tr>
                <td>404</td>
                <td>Not Found</td>
                <td>We cannot find what you requested, though the request looks good. Note that we do not differentiate between items that have never existed and ones that once existed but are now deleted... if we can't return it to you, then we return 'not found'.</td>
              </tr>
              <tr>
                <td>500</td>
                <td>Server Error</td>
                <td>Something bad has happened at our end and it's not your fault. You made a good request, but we've failed you. Please try again later, or send us a bug report: <a href="mailto:hello@microcosm.cc">hello@microcosm.cc</a> with an example of both the request and response and we will definitely look into it.</td>
              </tr>
            </tbody>
          </table>
          <p>It is possible to also generate other HTTP status codes, i.e. requesting an unsupported method such as PATCH would result in a 405 Method Not Supported response. However, if you follow this documentation only the above list of response codes will be encountered.</p>

          <h3>Callbacks using JSONP</h3>

          <p>We support JSONP, and to achieve that 3 things are needed:
            <ol>
              <li>The ability to wrap the returned JSON in a callback function.</li>
              <li>The ability to override the HTTP method so that you can perform the action of HTTP PUT and HTTP DELETE via HTTP POST.</li>
              <li>The ability to only ever return a HTTP 200 OK status.</li>
            </ol>
          </p>
          <p>To fulfil the first requirement you can wrap the response in a callback function name you provide by adding <code>callback=funcName</code> to the querystring of your request.</p>
          <p>To fulfil the second requirement you can overload the HTTP method by making a HTTP POST request and adding <code>method=PUT</code> or <code>method=DELETE</code> as necessary to the querystring.</p>
          <p class="well well-small">Note: If you are not using JSONP or have not proven that you require HTTP method overriding, then please do not do this. Instead just use the correct HTTP verb when you make your request. HTTP PUT and DELETE are <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Idempotent_methods_and_web_applications">idempotent</a> whereas HTTP POST is not, and this can create issues.</p>
          <p>To fulfil the third requirement you may add <code>always200</code> to the querystring and this will force the API to only ever return a HTTP 200 OK header regardless of what happened, however the <code>status</code> property in the boiler plate JSON will still give the underlying HTTP status code so that you can handle the response appropriately.</p>
          <p>This means that to make a JSONP request for GET and POST, you merely have made a request similar to <code>/api/version/resource?always200&amp;callback=funcName</code> and for PUT and DELETE you have additionally added <code>&amp;method=PUT</code> or <code>&amp;method=DELETE</code> as necessary to the querystring.</p>
          <p class="well well-small">Note: You should not combine <code>disableBoiler</code> with the JSONP features, as the API will only ever be returning HTTP 200 OK, and you will need to check the <code>status</code> property of the boiler plate.</p>
          <p>You are also able to provide <code>context</code> via the querystring and whatever the value of that parameter is will be provided back to you in the <code>context</code> property of the boiler plate.</p>

          <h3>URL Patterns</h3>

          <p>The base path of the API is <code>https://{subdomain}.microco.sm/api/v1</code> for a site hosted on microco.sm or <code>https://{customDomain}/api/v1</code> for a site hosted on a custom domain. All resources are children of that base path. Throughout this documentation you will see that base path written in shorthand as <code>/api/v1</code>.</p>
          <p>There are two patterns of URLs, and which is used is determined by whether the resource name in the URL is pluralised or not. Resources that are pluralised represent collections <code>/api/v1/things</code>, and resources that are not pluralised represent a single resource <code>/api/v1/thing</code>.</p>
          <p>Single resources tend to be descriptive meta-data only and will usually only respond successfully to a GET request.</p>
          <p>Resource URLs never end in a trailing slash, as resources are themselves the entity you operate on, and a trailing slash would indicate a directory on the web server.</p>
          <p>URLs and actions for a resource collection:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP Method</th>
                <th>URL Pattern</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>GET</td>
                <td>/api/v1/things</td>
                <td>Returns a collection of the resource called 'things'.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/things</td>
                <td>Collection updating is largely forbidden, would return HTTP 403. Please update individual items.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/things</td>
                <td>Collection deletion is largely forbidden, would return HTTP 403. Please delete individual items.</td>
              </tr>
              <tr>
                <td>POST</td>
                <td>/api/v1/things</td>
                <td>Would create a new resource 'thing' and return a 301 to the GET method for the newly created 'thing'.</td>
              </tr>
              <tr>
                <td>GET</td>
                <td>/api/v1/things/{id}</td>
                <td>Would read a single 'thing' for the given {id}.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/things/{id}</td>
                <td>Would update a single 'thing' for the given {id}.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/things/{id}</td>
                <td>Would delete a single 'thing' for the given {id}.</td>
              </tr>
            </tbody>
          </table>
          <p>URLs and actions for a single resource:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>HTTP Method</th>
                <th>URL Pattern</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>POST</td>
                <td>/api/v1/thing</td>
                <td>Create the resource. Likely to be forbidden in a single item resource as this tends to be a read-only resource.</td>
              </tr>
              <tr>
                <td>GET</td>
                <td>/api/v1/thing</td>
                <td>Read the resource.</td>
              </tr>
              <tr>
                <td>PUT</td>
                <td>/api/v1/thing</td>
                <td>Update the resource. Likely to be forbidden in a single item resource as this tends to be a read-only resource.</td>
              </tr>
              <tr>
                <td>DELETE</td>
                <td>/api/v1/thing</td>
                <td>Delete the resource. Likely to be forbidden in a single item resource as this tends to be a read-only resource.</td>
              </tr>
            </tbody>
          </table>
          <p class="well well-small">Note: If you add trailing slashes then the API returns a 404 Not Found response. Resources are not directories.</p>

          <h3>Pagination</h3>

          <p>Pagination of collections is supported using the offset approach:
            <ul>
              <li><code>limit</code> = <code>/api/v1/things?limit=10</code> would return up to 10 'things'.</li>
              <li><code>offset</code> = <code>/api/v1/things?offset=50</code> would return up to the default number of 'things' starting at the 50th record.</li>
              <li><code>limit</code> with <code>offset</code> = <code>/api/v1/things?limit=10&amp;offset=30</code> would return up to 10 'things' starting at the 30th record.</li>
            </ul>
          </p>
          <p>The default value for <code>limit</code> is 25, and the default value for <code>offset</code> is 0. Meaning that if you do nothing, then you will get up to 25 records at the beginning of the collection.</p>
          <p>The format of our collections is consistent, all resources that return a collection of items will do so using this structure:</p>
          <pre><code>"collectionName": {
  "total": 861,
  "limit": 10,
  "offset": 100,
  "pages": 87,
  "links": [
    {"rel": ["first"], "href": "/api/v1/things?limit=10"},
    {"rel": ["prev"], "href": "/api/v1/things?limit=10&offset=90"},
    {"rel": ["self"], "href": "/api/v1/things?limit=10&offset=100"},
    {"rel": ["next"], "href": "/api/v1/things?limit=10&offset=110"},
    {"rel": ["last"], "href": "/api/v1/things?limit=10&offset=860"},
  ],
  "type": "/api/v1/things",
  "items": [
    ...
  ]
}</code></pre>
          <p>Where:
            <ul>
              <li><code>collectionName</code> = Will be replaced with the name of the collection.</li>
              <li><code>total</code> = The total number of items in the collection.</li>
              <li><code>limit</code> = The maximum number of items per page of the collection.</li>
              <li><code>offset</code> = The current page in the collection.</li>
              <li><code>pages</code> = The number of pages in the collection.</li>
              <li><code>links</code> = A pre-calculated array of links to navigate the collection. If you are on the last page then you will not receive the <code>"rel": ["next"]</code> link, and likewise if you are on the first page you will not receive the <code>"rel": ["prev"]</code></li>
              <li><code>type</code> = Describes the type of record in the <code>items</code> array.</li>
              <li><code>items</code> = Contains the records being paginated.</li>
            </ul>
          </p>
          <p class="well well-small">Note: A 400 Bad Request will be returned if: <code>limit</code> is not divisible by 5, <code>offset</code> is not a multiple of the limit, or the use of <code>offset</code> would navigate to a page outside of the bounds of the collection.</p>

          <h3>Authentication</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>Error Handling</h3>
          <p>As a developer implementing against the API, you must rely on the <a href="#http">HTTP status codes</a> returned to handle errors.</p>
          <p>If an error has occurred we will additionally inform you, the developer, of the cause of the error by populating the <code>error</code> property of the <a href="boiler">boiler plate</a>. The <code>error</code> property holds an array of strings to help you, the developer, to fix the issue.</p>
          <p class="well well-small">Note: The audience of the error string array is the developer implementing against the API. Please take care not to send error messages to the end user. Instead handle it in some elegant way in the UI that you present to the end user. To emphasise this: the error text is not localised, it will always be in English, it is designed to be understood by a developer and not an end user, it may change over time to be clearer to developers how to fix the error. Bottom line: Rely on HTTP status codes and nothing else.</p>
          <p>An example error (in this case for an invalid authentication access token):</p>
          <pre><code>HTTP/1.1 403 Forbidden
Content-Type: application/json

{
  "context":"",
  "status":403,
  "data":null,
  "error":[
    "You have supplied an invalid access token"
  ]
}
</code></pre>
          <p class="well well-small">Note: If you are making <a href="#jsonp">JSONP</a> requests and are making use of the <code>always200</code> querystring flag, then you must look at the <code>status</code> property in the JSON response to ensure that you do not silently ignore errors.</p>

          <h2>The API</h2>

          <h3>API Flow</h3>
          
          <p>At the highest level you can imagine that the core flow through the API is this:
            <img src="img/flow.png" title="Image showing the high level flow through the API." />
          </p>
          <p>Sites have Microcosms, Microcosms have types of content that include Conversations, Events and Poll. That content can additionally have Comments. Sites also have Profiles, and as a convenience method we provide WhoAmI to redirect you to the profile of the authenticated user.</p>
          <p>That is overly simplistic, of course Comments are made by Profiles, and an Event describes which Microcosm it is in, etc but as a high-level view it suffices.</p>

          <h3>/site</h3>

          <p>Provides information about the site that you are currently on: the name of the site, the site logo, who created the site, and who owns the site.</p>

          <p>Valid URLs and options:</p>
          <table class="table table-hover">
            <thead>
              <tr>
                <th>URL Pattern</th>
                <th>Method</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>/api/v1/site</td>
                <td>OPTIONS</td>
                <td><code>Allow:</code> header lists the methods available.</td>
              </tr>
              <tr>
                <td>/api/v1/site</td>
                <td>GET</td>
                <td>Returns information about the current site.</td>
              </tr>
            </tbody>
          </table>

          <h4>OPTIONS</h4>
          
          <h5>Request</h5>
          
          <pre><code>curl -i -X OPTIONS https://{subdomain}.microco.sm/api/v1/site</code></pre>

          <h5>Response</h5>

<pre><code>HTTP/1.1 200 OK
Allow: GET,OPTIONS
Content-Type: text/plain; charset=utf-8
Content-Length: 0
Accept-Ranges: bytes
Date: Tue, 02 Apr 2013 14:35:55 GMT
Connection: keep-alive</code></pre>

          <h4>GET</h4>
          <h5>Request</h5>

          <pre><code>curl -X GET https://{subdomain}.microco.sm/api/v1/site</code></pre>

          <h5>Response</h5>
<pre><code>{
  "context":"",
  "status":200,
  "data":{
    "siteId":1,
    "title":"Site Title",
    "description":"This is the demo Microcosm site",
    "subdomainKey":"demo",
    "domain":"demo.microcosm.cc",
    "created":"2013-03-29T09:58:52.490145Z",
    "createdBy":{
      "id":1,
      "userId":1,
      "profileName":"Velocio",
      "visible":true,
      "created":"2013-03-29T09:58:52.499968Z",
      "lastActive":"2013-03-29T09:58:52.499968Z",
      "gravatar":"https://secure.gravatar.com/avatar/309cb01f0a25f751e7294407d983f801",
      "banned":false,
      "moderator":false,
      "admin":false,
      "meta":{
        "links":[
          {"rel":["self"], "href":"/api/v1/profiles/1"},
          {"rel":["site", "/api/v1/site"], "href":"/api/v1/site"}
        ]
      }
    },
    "ownedBy":{
      "id":1,
      "userId":1,
      "profileName":"Velocio",
      "visible":true,
      "created":"2013-03-29T09:58:52.499968Z",
      "lastActive":"2013-03-29T09:58:52.499968Z",
      "gravatar":"https://secure.gravatar.com/avatar/309cb01f0a25f751e7294407d983f801",
      "banned":false,
      "moderator":false,
      "admin":false,
      "meta":{
        "links":[
          {"rel":["self"], "href":"/api/v1/profiles/1"},
          {"rel":["site", "/api/v1/site"], "href":"/api/v1/site"}
        ]
      }
    },
    "logoUrl":"http://example.org",
    "meta":{
      "links":[
        {"rel":["self"], "href":"/api/v1/site"}
      ],
      "permissions":{
        "create":false,
        "read":true,
        "update":false,
        "delete":false,
        "guest":true,
        "superUser":false
      }
    }
  },
  "error":null
}</code></pre>

          <h3>/microcosms</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/conversations</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/events</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/polls</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/comments</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/profiles</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

          <h3>/whoami</h3>
          <p>TODO: Some text goes here, this is just placeholder</p>

        </div>
      </div>
    </div>

    <!-- jQuery and Bootstrap -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>

    <!-- Tocify -->
    <script src="/js/jquery.tocify.min.js"></script>

    <!-- Prettify -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/prettify/r224/prettify.js" type="text/javascript"></script>

    <!-- Kick out the Jamms -->
    <script>
    $(document).ready(function() {
        // Navigation wizardry, builds navigation from the structure of the document
        var toc = $("#toc").tocify({ selectors: "h2, h3, h4" }).data("toc-tocify");

        // Source code prettiness
        var prettify = false;
        $("pre code").parent().each(function() {
            $(this).addClass('prettyprint');
            prettify = true;
        });
        if (prettify) {prettyPrint();}
    });
    </script>
  </body>
</html>
